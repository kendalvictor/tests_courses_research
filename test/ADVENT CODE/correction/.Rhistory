"
Reto Programaci?n
Se debe entregar encomiendas en varias ubicaciones
del mundo, teniendo para ello un mapa con un punto
por ubicacion exacta, y las respectivas distancias
entre cada punto.
Los puntos de inicio y ???n deben ser distintos, pero
debe visitar cada ubicaci?n exactamente una vez.
?Cu?l es la distancia m?s corta que puede recorrer
para lograr esto?
"
# Se crea la funci?n fun_rutas que tiene como ?nico par?etro data, que es el archivo de datos
fun_rutas <- function(data){
rutas <- data.frame(data)
rutas$V2 <- NULL ; rutas$V4 <- NULL
names(rutas) <- c("PUNTO1","PUNTO2","DISTANCIA")
# Librerias
library(dplyr)
library(gtools)
library(tidyr)
# Convirtiendo en character
rutas$PUNTO1 <- as.character(rutas$PUNTO1)
rutas$PUNTO2 <- as.character(rutas$PUNTO2)
# Ver todos los puntos que hay en la data
puntos <- data.frame(Puntos = unique(c(as.vector(unique(rutas$PUNTO1)),
as.vector(unique(rutas$PUNTO2)))))
puntos$Puntos <- as.character(puntos$Puntos) # Convirtiendo en character
puntos$Numero <- 1:nrow(puntos) # Se asigna un valor numerico por cada punto
# Se crea un nuevo data frame de rutas pero con valores numericos para cada punto
rutas2 <- left_join(rutas,puntos, by = c("PUNTO1"="Puntos"))
rutas2 <- left_join(rutas2,puntos, by = c("PUNTO2"="Puntos"))
rutas2 <- rutas2[,c("Numero.x", "Numero.y","DISTANCIA")]
names(rutas2) <- c("P1","P2","DISTANCIA")
################################################################
# Se toma el numero de puntos que se tiene en la data
n <- nrow(puntos)
# Concatenar los puntos dos a dos
datos <- rutas2
datos$X <- paste0(rutas2$P1,rutas2$P2)
datos <- datos[,c("X","DISTANCIA")]
# Matriz de ceros de nxn para almacenar las distancias
ceros <- matrix(0,n,n)
# Loop para crear la matriz de distancias
for (i in 1:n) {
for (j in 1:n) {
if(i == j){
ceros[i,j] <- 0
}
else if (i > j) {
valor <- paste0(j,i)
posicion <- (which(datos$X == valor))
ceros[i,j] <- datos[posicion,2]
}
else{
valor2 <- paste0(i,j)
posicion2 <- (which(datos$X == valor2))
ceros[i,j] <- datos[posicion2,2]
}
}
}
#
caminos <- data.frame(permutations(n,n, puntos$Numero)) # Todas las combinaciones posibles de n en n
f <- nrow(caminos) # Numero de filas
c <- ncol(caminos) # Numero de columnas
# Data frame de ceros
df <- data.frame(matrix(0,f,c-1))
names(df) <- paste0("DIS",1:(c-1)) # Asignar nombres a las columnas del DF
caminos <- data.frame(caminos,df) # Unir el data frame caminos y df
# Loop para almacenar las distancias dos a dos de todos los combinaciones
for (i in 1:f) {
for (j in 1:(c-1)) {
caminos[i,c+j] <- ceros[caminos[i,j],caminos[i,j+1]]
}
}
# Vector que ubica la posicion de las distancias
DISTANCIA <- grep("DIS",names(caminos))
# Suma de las distancias para cada ruta posible
caminos$DIST_TOTAL <- rowSums(caminos[,DISTANCIA])
# Ubicamos la minima distancia total
minimo <- min(caminos$DIST_TOTAL)
# Filtrar la distancia minima
DIS_MIN <- caminos[caminos$DIST_TOTAL == minimo,]
# Selecionamos las columnas de puntos y la distancia total
DIS_MIN <- DIS_MIN[,c(1:n,ncol(DIS_MIN))]
# Se crea una llave para regresar a los nombres de ruta originales
DIS_MIN$KEY <- 1:2
nombres_rutas <- DIS_MIN[,1:n]
nombres_rutas$KEY <- 1:2
DIS_FIN <- gather(nombres_rutas,
key = "XS",
value = "Numero",-KEY)
# join de la entre los puntos en numeros y los nombres originales
DIS_FIN <- left_join(DIS_FIN,puntos, by = c("Numero"))
DIS_FIN$Numero <- NULL
DIS_FIN2 <- spread(DIS_FIN,
key = "XS",
value = "Puntos")
# Data frame de las rutas con las distamcia minima
DIS_FIN2 <- left_join(DIS_FIN2,DIS_MIN[,c("DIST_TOTAL","KEY")], by = "KEY")
DIS_FIN2$KEY <- NULL
DIS_FIN2 <- unite(DIS_FIN2,RUTA,c(1:n),sep = " => ",remove = T)
# Mensaje de salida
print(paste0("Siguiendo la ruta: ",
DIS_FIN2$RUTA[1],
" o la ruta: ",
DIS_FIN2$RUTA[2],
" se logra una distancia la m?s corta: ",
DIS_FIN2$DIST_TOTAL[1]))
}
# Lectura del archivo que contiene la informaci?n de las rutas
# El Archivo debe estar en el mismo formato compartido en el Drive
rutas8 <- read.table("rutas.txt", quote="\"", comment.char="")
fun_rutas(rutas8)
install.packages("dplyr")
install.packages("gtools")
install.packages("tidyr")
"
Reto Programaci?n
Se debe entregar encomiendas en varias ubicaciones
del mundo, teniendo para ello un mapa con un punto
por ubicacion exacta, y las respectivas distancias
entre cada punto.
Los puntos de inicio y ???n deben ser distintos, pero
debe visitar cada ubicaci?n exactamente una vez.
?Cu?l es la distancia m?s corta que puede recorrer
para lograr esto?
"
# Se crea la funci?n fun_rutas que tiene como ?nico par?etro data, que es el archivo de datos
fun_rutas <- function(data){
rutas <- data.frame(data)
rutas$V2 <- NULL ; rutas$V4 <- NULL
names(rutas) <- c("PUNTO1","PUNTO2","DISTANCIA")
# Librerias
library(dplyr)
library(gtools)
library(tidyr)
# Convirtiendo en character
rutas$PUNTO1 <- as.character(rutas$PUNTO1)
rutas$PUNTO2 <- as.character(rutas$PUNTO2)
# Ver todos los puntos que hay en la data
puntos <- data.frame(Puntos = unique(c(as.vector(unique(rutas$PUNTO1)),
as.vector(unique(rutas$PUNTO2)))))
puntos$Puntos <- as.character(puntos$Puntos) # Convirtiendo en character
puntos$Numero <- 1:nrow(puntos) # Se asigna un valor numerico por cada punto
# Se crea un nuevo data frame de rutas pero con valores numericos para cada punto
rutas2 <- left_join(rutas,puntos, by = c("PUNTO1"="Puntos"))
rutas2 <- left_join(rutas2,puntos, by = c("PUNTO2"="Puntos"))
rutas2 <- rutas2[,c("Numero.x", "Numero.y","DISTANCIA")]
names(rutas2) <- c("P1","P2","DISTANCIA")
################################################################
# Se toma el numero de puntos que se tiene en la data
n <- nrow(puntos)
# Concatenar los puntos dos a dos
datos <- rutas2
datos$X <- paste0(rutas2$P1,rutas2$P2)
datos <- datos[,c("X","DISTANCIA")]
# Matriz de ceros de nxn para almacenar las distancias
ceros <- matrix(0,n,n)
# Loop para crear la matriz de distancias
for (i in 1:n) {
for (j in 1:n) {
if(i == j){
ceros[i,j] <- 0
}
else if (i > j) {
valor <- paste0(j,i)
posicion <- (which(datos$X == valor))
ceros[i,j] <- datos[posicion,2]
}
else{
valor2 <- paste0(i,j)
posicion2 <- (which(datos$X == valor2))
ceros[i,j] <- datos[posicion2,2]
}
}
}
#
caminos <- data.frame(permutations(n,n, puntos$Numero)) # Todas las combinaciones posibles de n en n
f <- nrow(caminos) # Numero de filas
c <- ncol(caminos) # Numero de columnas
# Data frame de ceros
df <- data.frame(matrix(0,f,c-1))
names(df) <- paste0("DIS",1:(c-1)) # Asignar nombres a las columnas del DF
caminos <- data.frame(caminos,df) # Unir el data frame caminos y df
# Loop para almacenar las distancias dos a dos de todos los combinaciones
for (i in 1:f) {
for (j in 1:(c-1)) {
caminos[i,c+j] <- ceros[caminos[i,j],caminos[i,j+1]]
}
}
# Vector que ubica la posicion de las distancias
DISTANCIA <- grep("DIS",names(caminos))
# Suma de las distancias para cada ruta posible
caminos$DIST_TOTAL <- rowSums(caminos[,DISTANCIA])
# Ubicamos la minima distancia total
minimo <- min(caminos$DIST_TOTAL)
# Filtrar la distancia minima
DIS_MIN <- caminos[caminos$DIST_TOTAL == minimo,]
# Selecionamos las columnas de puntos y la distancia total
DIS_MIN <- DIS_MIN[,c(1:n,ncol(DIS_MIN))]
# Se crea una llave para regresar a los nombres de ruta originales
DIS_MIN$KEY <- 1:2
nombres_rutas <- DIS_MIN[,1:n]
nombres_rutas$KEY <- 1:2
DIS_FIN <- gather(nombres_rutas,
key = "XS",
value = "Numero",-KEY)
# join de la entre los puntos en numeros y los nombres originales
DIS_FIN <- left_join(DIS_FIN,puntos, by = c("Numero"))
DIS_FIN$Numero <- NULL
DIS_FIN2 <- spread(DIS_FIN,
key = "XS",
value = "Puntos")
# Data frame de las rutas con las distamcia minima
DIS_FIN2 <- left_join(DIS_FIN2,DIS_MIN[,c("DIST_TOTAL","KEY")], by = "KEY")
DIS_FIN2$KEY <- NULL
DIS_FIN2 <- unite(DIS_FIN2,RUTA,c(1:n),sep = " => ",remove = T)
# Mensaje de salida
print(paste0("Siguiendo la ruta: ",
DIS_FIN2$RUTA[1],
" o la ruta: ",
DIS_FIN2$RUTA[2],
" se logra una distancia la m?s corta: ",
DIS_FIN2$DIST_TOTAL[1]))
}
# Lectura del archivo que contiene la informaci?n de las rutas
# El Archivo debe estar en el mismo formato compartido en el Drive
rutas8 <- read.table("rutas.txt", quote="\"", comment.char="")
fun_rutas(rutas8)
install.packages("dplyr")
"
Reto Programaci?n
Se debe entregar encomiendas en varias ubicaciones
del mundo, teniendo para ello un mapa con un punto
por ubicacion exacta, y las respectivas distancias
entre cada punto.
Los puntos de inicio y ???n deben ser distintos, pero
debe visitar cada ubicaci?n exactamente una vez.
?Cu?l es la distancia m?s corta que puede recorrer
para lograr esto?
"
# Se crea la funci?n fun_rutas que tiene como ?nico par?etro data, que es el archivo de datos
fun_rutas <- function(data){
rutas <- data.frame(data)
rutas$V2 <- NULL ; rutas$V4 <- NULL
names(rutas) <- c("PUNTO1","PUNTO2","DISTANCIA")
# Librerias
library(dplyr)
library(gtools)
library(tidyr)
# Convirtiendo en character
rutas$PUNTO1 <- as.character(rutas$PUNTO1)
rutas$PUNTO2 <- as.character(rutas$PUNTO2)
# Ver todos los puntos que hay en la data
puntos <- data.frame(Puntos = unique(c(as.vector(unique(rutas$PUNTO1)),
as.vector(unique(rutas$PUNTO2)))))
puntos$Puntos <- as.character(puntos$Puntos) # Convirtiendo en character
puntos$Numero <- 1:nrow(puntos) # Se asigna un valor numerico por cada punto
# Se crea un nuevo data frame de rutas pero con valores numericos para cada punto
rutas2 <- left_join(rutas,puntos, by = c("PUNTO1"="Puntos"))
rutas2 <- left_join(rutas2,puntos, by = c("PUNTO2"="Puntos"))
rutas2 <- rutas2[,c("Numero.x", "Numero.y","DISTANCIA")]
names(rutas2) <- c("P1","P2","DISTANCIA")
################################################################
# Se toma el numero de puntos que se tiene en la data
n <- nrow(puntos)
# Concatenar los puntos dos a dos
datos <- rutas2
datos$X <- paste0(rutas2$P1,rutas2$P2)
datos <- datos[,c("X","DISTANCIA")]
# Matriz de ceros de nxn para almacenar las distancias
ceros <- matrix(0,n,n)
# Loop para crear la matriz de distancias
for (i in 1:n) {
for (j in 1:n) {
if(i == j){
ceros[i,j] <- 0
}
else if (i > j) {
valor <- paste0(j,i)
posicion <- (which(datos$X == valor))
ceros[i,j] <- datos[posicion,2]
}
else{
valor2 <- paste0(i,j)
posicion2 <- (which(datos$X == valor2))
ceros[i,j] <- datos[posicion2,2]
}
}
}
#
caminos <- data.frame(permutations(n,n, puntos$Numero)) # Todas las combinaciones posibles de n en n
f <- nrow(caminos) # Numero de filas
c <- ncol(caminos) # Numero de columnas
# Data frame de ceros
df <- data.frame(matrix(0,f,c-1))
names(df) <- paste0("DIS",1:(c-1)) # Asignar nombres a las columnas del DF
caminos <- data.frame(caminos,df) # Unir el data frame caminos y df
# Loop para almacenar las distancias dos a dos de todos los combinaciones
for (i in 1:f) {
for (j in 1:(c-1)) {
caminos[i,c+j] <- ceros[caminos[i,j],caminos[i,j+1]]
}
}
# Vector que ubica la posicion de las distancias
DISTANCIA <- grep("DIS",names(caminos))
# Suma de las distancias para cada ruta posible
caminos$DIST_TOTAL <- rowSums(caminos[,DISTANCIA])
# Ubicamos la minima distancia total
minimo <- min(caminos$DIST_TOTAL)
# Filtrar la distancia minima
DIS_MIN <- caminos[caminos$DIST_TOTAL == minimo,]
# Selecionamos las columnas de puntos y la distancia total
DIS_MIN <- DIS_MIN[,c(1:n,ncol(DIS_MIN))]
# Se crea una llave para regresar a los nombres de ruta originales
DIS_MIN$KEY <- 1:2
nombres_rutas <- DIS_MIN[,1:n]
nombres_rutas$KEY <- 1:2
DIS_FIN <- gather(nombres_rutas,
key = "XS",
value = "Numero",-KEY)
# join de la entre los puntos en numeros y los nombres originales
DIS_FIN <- left_join(DIS_FIN,puntos, by = c("Numero"))
DIS_FIN$Numero <- NULL
DIS_FIN2 <- spread(DIS_FIN,
key = "XS",
value = "Puntos")
# Data frame de las rutas con las distamcia minima
DIS_FIN2 <- left_join(DIS_FIN2,DIS_MIN[,c("DIST_TOTAL","KEY")], by = "KEY")
DIS_FIN2$KEY <- NULL
DIS_FIN2 <- unite(DIS_FIN2,RUTA,c(1:n),sep = " => ",remove = T)
# Mensaje de salida
print(paste0("Siguiendo la ruta: ",
DIS_FIN2$RUTA[1],
" o la ruta: ",
DIS_FIN2$RUTA[2],
" se logra una distancia la m?s corta: ",
DIS_FIN2$DIST_TOTAL[1]))
}
# Lectura del archivo que contiene la informaci?n de las rutas
# El Archivo debe estar en el mismo formato compartido en el Drive
rutas8 <- read.table("rutas.txt", quote="\"", comment.char="")
fun_rutas(rutas8)
